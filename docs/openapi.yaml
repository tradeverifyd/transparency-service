openapi: 3.1.0
info:
  title: SCITT Transparency Service API
  version: 1.0.0
  description: |
    IETF SCITT SCRAPI + C2SP Tile Log Extensions

    This API implements:
    - IETF SCITT SCRAPI (draft-ietf-scitt-scrapi)
    - C2SP Tile Logs (tlog-tiles.md)
    - IETF COSE Merkle Tree Proofs (draft-ietf-cose-merkle-tree-proofs-17)

    **Dual Implementation**: This specification is implemented in both TypeScript and Go
    with 100% interoperability.

    **Cryptography**: ES256 (ECDSA with P-256 and SHA-256) for all signatures

    **Merkle Trees**: RFC 6962 with SHA-256
  contact:
    name: SCITT Transparency Service
    url: https://github.com/org/transparency-service
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://transparency.example.com
    description: Production server
  - url: http://localhost:8080
    description: Development server

tags:
  - name: SCRAPI
    description: IETF SCITT SCRAPI endpoints (mandatory + optional)
  - name: C2SP Tiles
    description: C2SP tile log endpoints
  - name: Discovery
    description: Service discovery and configuration

paths:
  /.well-known/scitt-configuration:
    get:
      tags: [Discovery]
      summary: Get service configuration
      description: |
        Returns service configuration and capabilities per SCRAPI specification.
        **SCRAPI**: Mandatory endpoint
      operationId: getServiceConfiguration
      responses:
        '200':
          description: Service configuration
          content:
            application/cbor:
              schema:
                $ref: '#/components/schemas/ServiceConfiguration'
          headers:
            Cache-Control:
              schema:
                type: string
              example: "public, max-age=300"

  /.well-known/scitt-keys:
    get:
      tags: [Discovery]
      summary: Get service signing keys
      description: |
        Returns service public keys in COSE Key format.
        **SCRAPI**: Mandatory endpoint
      operationId: getServiceKeys
      responses:
        '200':
          description: Service keys
          content:
            application/cbor:
              schema:
                $ref: '#/components/schemas/ServiceKeys'
          headers:
            Cache-Control:
              schema:
                type: string
              example: "public, max-age=3600"

  /entries:
    post:
      tags: [SCRAPI]
      summary: Register signed statement
      description: |
        Register a COSE Sign1 signed statement to the transparency log.
        **SCRAPI**: Mandatory endpoint

        Response codes:
        - 201: Statement registered, receipt returned
        - 303: Registration running (async), Location header provided
        - 400: Invalid request
      operationId: registerStatement
      requestBody:
        required: true
        content:
          application/cose:
            schema:
              type: string
              format: binary
              description: COSE Sign1 signed statement
      responses:
        '201':
          description: Statement registered successfully
          content:
            application/cose:
              schema:
                type: string
                format: binary
                description: COSE Sign1 receipt with inclusion proof
          headers:
            Location:
              schema:
                type: string
              description: URI to query registration status
              example: "/entries/sha256-abc123..."
        '303':
          description: Registration running (async processing)
          headers:
            Location:
              schema:
                type: string
              required: true
              description: URI to poll for registration status
          content:
            application/concise-problem-details+cbor:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '400':
          description: Invalid request
          content:
            application/concise-problem-details+cbor:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /entries/{entryId}:
    get:
      tags: [SCRAPI]
      summary: Query registration status
      description: |
        Query the status of a statement registration and retrieve the statement with receipt.
        **SCRAPI**: Mandatory endpoint

        Response codes:
        - 200: Statement registered, returns statement with embedded receipt
        - 302: Registration still running
        - 404: Entry not found
        - 429: Rate limit exceeded
      operationId: getEntry
      parameters:
        - name: entryId
          in: path
          required: true
          schema:
            type: string
          description: SHA-256 hash of the COSE Sign1 statement
          example: "sha256-abc123def456..."
      responses:
        '200':
          description: Statement with receipt
          content:
            application/cose:
              schema:
                type: string
                format: binary
                description: COSE Sign1 statement with embedded receipt
        '302':
          description: Registration running
          headers:
            Location:
              schema:
                type: string
              description: URI to poll (same as request URI)
        '404':
          description: Entry not found
          content:
            application/concise-problem-details+cbor:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '429':
          description: Rate limit exceeded
          content:
            application/concise-problem-details+cbor:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          headers:
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying

  /receipt-exchange:
    post:
      tags: [SCRAPI]
      summary: Exchange receipt format
      description: |
        Exchange a receipt for a different format.
        **SCRAPI**: Optional endpoint
      operationId: exchangeReceipt
      requestBody:
        required: true
        content:
          application/cose:
            schema:
              type: string
              format: binary
              description: Receipt to exchange
      responses:
        '200':
          description: Receipt in new format
          content:
            application/cose:
              schema:
                type: string
                format: binary
                description: Exchanged receipt

  /signed-statements/{statementId}:
    get:
      tags: [SCRAPI]
      summary: Resolve signed statement by content ID
      description: |
        Retrieve a signed statement by its content identifier.
        **SCRAPI**: Optional endpoint
      operationId: getSignedStatement
      parameters:
        - name: statementId
          in: path
          required: true
          schema:
            type: string
          description: Content identifier of the statement
      responses:
        '200':
          description: Signed statement
          content:
            application/cose:
              schema:
                type: string
                format: binary
        '404':
          description: Statement not found
          content:
            application/concise-problem-details+cbor:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /issuers/{issuerId}:
    get:
      tags: [SCRAPI]
      summary: Resolve issuer information
      description: |
        Retrieve information about a statement issuer.
        **SCRAPI**: Optional endpoint
      operationId: getIssuer
      parameters:
        - name: issuerId
          in: path
          required: true
          schema:
            type: string
          description: Issuer identifier (URI)
          example: "did:web:example.com"
      responses:
        '200':
          description: Issuer information
          content:
            application/cbor:
              schema:
                $ref: '#/components/schemas/IssuerInfo'
        '404':
          description: Issuer not found
          content:
            application/concise-problem-details+cbor:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /checkpoint:
    get:
      tags: [C2SP Tiles]
      summary: Get signed checkpoint
      description: |
        Returns the current Merkle tree checkpoint as a COSE Sign1 structure.
        **C2SP**: Adapted from C2SP (uses COSE Sign1 instead of Ed25519 text format)

        The checkpoint provides a signed proof of the current tree state.
      operationId: getCheckpoint
      responses:
        '200':
          description: Signed checkpoint
          content:
            application/cose:
              schema:
                type: string
                format: binary
                description: COSE Sign1 checkpoint
          headers:
            Cache-Control:
              schema:
                type: string
              example: "public, max-age=5"
              description: Short-term caching (mutable)

  /tile/{level}/{index}:
    get:
      tags: [C2SP Tiles]
      summary: Get full tile
      description: |
        Retrieve a full Merkle tree tile (256 hashes Ã— 32 bytes = 8,192 bytes).
        **C2SP**: Tile log endpoint

        Tiles are immutable and support long-lived caching.
      operationId: getTile
      parameters:
        - name: level
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
            maximum: 63
          description: Tree level (0 = leaves)
        - name: index
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9]{3}(/[0-9]{3})*$'
          description: Tile index (zero-padded 3-digit groups)
          examples:
            simple:
              value: "000"
              summary: First tile
            nested:
              value: "001/234"
              summary: Nested tile path
      responses:
        '200':
          description: Full tile data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: 8,192 bytes (256 Ã— 32-byte hashes)
          headers:
            Cache-Control:
              schema:
                type: string
              example: "public, max-age=31536000, immutable"
        '404':
          description: Tile not found

  /tile/{level}/{index}.p/{width}:
    get:
      tags: [C2SP Tiles]
      summary: Get partial tile
      description: |
        Retrieve a partial Merkle tree tile (1-255 hashes).
        **C2SP**: Tile log endpoint
      operationId: getPartialTile
      parameters:
        - name: level
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
            maximum: 63
        - name: index
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9]{3}(/[0-9]{3})*$'
        - name: width
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 255
          description: Number of hashes in partial tile
      responses:
        '200':
          description: Partial tile data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: width Ã— 32 bytes
          headers:
            Cache-Control:
              schema:
                type: string
              example: "public, max-age=31536000, immutable"
        '404':
          description: Tile not found

  /tile/entries/{index}:
    get:
      tags: [C2SP Tiles]
      summary: Get full entry tile
      description: |
        Retrieve a full tile of log entries (256 entries).
        **C2SP**: Entry tile endpoint

        Entries are length-prefixed and optionally gzip-compressed.
      operationId: getEntryTile
      parameters:
        - name: index
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9]{3}(/[0-9]{3})*$'
          description: Entry tile index
          example: "000"
      responses:
        '200':
          description: Entry tile data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: Length-prefixed entries (optionally gzip)
          headers:
            Cache-Control:
              schema:
                type: string
              example: "public, max-age=31536000, immutable"
            Content-Encoding:
              schema:
                type: string
              example: "gzip"
              description: May be gzip-compressed
        '404':
          description: Entry tile not found

  /tile/entries/{index}.p/{width}:
    get:
      tags: [C2SP Tiles]
      summary: Get partial entry tile
      description: |
        Retrieve a partial tile of log entries (1-255 entries).
        **C2SP**: Entry tile endpoint
      operationId: getPartialEntryTile
      parameters:
        - name: index
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9]{3}(/[0-9]{3})*$'
        - name: width
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 255
          description: Number of entries in partial tile
      responses:
        '200':
          description: Partial entry tile data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Cache-Control:
              schema:
                type: string
              example: "public, max-age=31536000, immutable"
            Content-Encoding:
              schema:
                type: string
              example: "gzip"
        '404':
          description: Entry tile not found

components:
  schemas:
    ServiceConfiguration:
      type: object
      description: SCRAPI service configuration
      required:
        - serviceId
        - treeAlgorithm
        - signatureAlgorithm
        - entryId
      properties:
        serviceId:
          type: string
          format: uri
          example: "https://transparency.example.com"
        treeAlgorithm:
          type: string
          enum: ["RFC9162_SHA256"]
        signatureAlgorithm:
          type: string
          enum: ["ES256"]
        entryId:
          type: string
          enum: ["sha-256"]
        supportedPayloadFormats:
          type: array
          items:
            type: string
          example: ["application/json", "application/cbor"]
        registrationPolicies:
          type: array
          items:
            type: object
        extensions:
          type: object
          properties:
            c2sp_tiles:
              type: boolean
              example: true
            checkpoint_endpoint:
              type: string
              example: "/checkpoint"

    ServiceKeys:
      type: object
      description: Service public keys in COSE Key format
      required:
        - keys
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/CoseKey'

    CoseKey:
      type: object
      description: COSE Key (RFC 8152)
      required:
        - kty
        - crv
        - kid
        - x
        - y
      properties:
        kty:
          type: string
          enum: ["EC"]
        crv:
          type: string
          enum: ["P-256"]
        kid:
          type: string
          example: "service-key-2025"
        x:
          type: string
          format: byte
          description: X coordinate (base64url)
        y:
          type: string
          format: byte
          description: Y coordinate (base64url)
        use:
          type: string
          enum: ["sig"]
        alg:
          type: string
          enum: ["ES256"]

    IssuerInfo:
      type: object
      description: Issuer metadata
      required:
        - id
        - created
      properties:
        id:
          type: string
          format: uri
          example: "did:web:example.com"
        name:
          type: string
        description:
          type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time

    ProblemDetails:
      type: object
      description: RFC 7807 Problem Details (CBOR format)
      required:
        - type
        - title
        - status
      properties:
        type:
          type: string
          format: uri
          example: "https://transparency.example.com/errors/invalid-statement"
        title:
          type: string
          example: "Invalid Statement"
        status:
          type: integer
          example: 400
        detail:
          type: string
          example: "COSE Sign1 signature verification failed"
        instance:
          type: string
          format: uri
          example: "/entries/abc123"

  securitySchemes: {}

security: []

externalDocs:
  description: SCITT SCRAPI Specification
  url: https://ietf-wg-scitt.github.io/draft-ietf-scitt-scrapi/
