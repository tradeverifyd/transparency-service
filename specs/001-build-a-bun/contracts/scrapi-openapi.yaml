openapi: 3.0.3
info:
  title: SCITT SCRAPI + Tile Log API
  version: 1.0.0
  description: |
    IETF SCITT SCRAPI-compliant transparency service API with C2SP tlog-tiles support.

    This API implements:
    - SCITT SCRAPI (draft-ietf-scitt-scrapi)
    - C2SP tlog-tiles specification
    - COSE Hash Envelope (draft-ietf-cose-hash-envelope)
    - COSE Merkle Tree Proofs (draft-ietf-cose-merkle-tree-proofs)

    Content Types:
    - application/cbor: CBOR-encoded data (config, keys)
    - application/cose: COSE Sign1 structures (statements, receipts)
    - application/octet-stream: Raw tile data
    - text/plain: Signed notes (checkpoints)
  contact:
    name: Transparency Service
    url: https://transparency.example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://transparency.example.com
    description: Production transparency service
  - url: http://localhost:3000
    description: Local development

paths:
  /.well-known/scitt-configuration:
    get:
      summary: Get transparency service configuration
      description: |
        Returns service capabilities, supported algorithms, and policies.
        CBOR-encoded map per SCITT SCRAPI specification.
      operationId: getConfiguration
      responses:
        '200':
          description: Service configuration
          content:
            application/cbor:
              schema:
                type: object
                description: CBOR map with service configuration
              example: |
                {
                  "service_url": "https://transparency.example.com",
                  "supported_algorithms": [-7, -16],
                  "registration_policy": "open"
                }
        '500':
          $ref: '#/components/responses/InternalError'

  /.well-known/scitt-keys:
    get:
      summary: Get transparency service public keys
      description: |
        Returns COSE Key Set with public keys for verifying receipts.
        Required for offline verification of signed tree heads and receipts.
      operationId: getServiceKeys
      responses:
        '200':
          description: COSE Key Set
          content:
            application/cbor:
              schema:
                type: object
                description: CBOR-encoded COSE Key Set
              example: |
                [
                  {
                    "kty": "EC",
                    "crv": "P-256",
                    "x": "...",
                    "y": "...",
                    "kid": "service-key-1"
                  }
                ]
        '500':
          $ref: '#/components/responses/InternalError'

  /entries:
    post:
      summary: Register signed statement
      description: |
        Submit a COSE Sign1 signed statement (with hash envelope) for registration.

        Response codes:
        - 201: Synchronous registration - receipt in response body
        - 303: Asynchronous registration - poll Location header for status
      operationId: registerStatement
      requestBody:
        required: true
        content:
          application/cose:
            schema:
              type: string
              format: binary
              description: CBOR-encoded COSE Sign1 with hash envelope
      responses:
        '201':
          description: Statement registered synchronously
          content:
            application/cose:
              schema:
                type: string
                format: binary
                description: COSE receipt with inclusion proof
          headers:
            Location:
              schema:
                type: string
              description: URL to retrieve statement/receipt
        '303':
          description: Registration in progress (asynchronous)
          headers:
            Location:
              schema:
                type: string
              description: URL to poll for registration status
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

  /entries/{entry-id}:
    get:
      summary: Get registration status or retrieve statement
      description: |
        Query registration status (for async) or retrieve registered statement.

        Response codes:
        - 302: Registration still in progress - Location header for continued polling
        - 200: Registration complete - receipt in response body
      operationId: getEntry
      parameters:
        - $ref: '#/components/parameters/EntryId'
      responses:
        '200':
          description: Registration complete
          content:
            application/cose:
              schema:
                type: string
                format: binary
                description: COSE receipt or signed statement
        '302':
          description: Registration in progress
          headers:
            Location:
              schema:
                type: string
              description: URL to poll again
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /entries/{entry-id}/receipt:
    get:
      summary: Resolve receipt for entry
      description: |
        Retrieve receipt (COSE Merkle tree proof) for a registered statement.
      operationId: getReceipt
      parameters:
        - $ref: '#/components/parameters/EntryId'
      responses:
        '200':
          description: Receipt found
          content:
            application/cose:
              schema:
                type: string
                format: binary
                description: COSE receipt with Merkle inclusion proof
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /tile/{level}/{tile-path}:
    get:
      summary: Get Merkle tree hash tile
      description: |
        Retrieve hash tile at specified level and index.
        Path format: /tile/{L}/{N} or /tile/{L}/{N}.p/{W}
        where N is zero-padded 3-digit segments (e.g., x001/x234/067)
      operationId: getHashTile
      parameters:
        - name: level
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
            maximum: 63
          description: Tile level (0 = leaves, higher = tree hashes)
        - name: tile-path
          in: path
          required: true
          schema:
            type: string
          description: Tile path (e.g., "x001/x234/067" or "x001/x234/067.p/128")
      responses:
        '200':
          description: Tile data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: 8,192 bytes (full) or W*32 bytes (partial)
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /tile/entries/{tile-path}:
    get:
      summary: Get entry tile (signed statements)
      description: |
        Retrieve entry tile containing CBOR-encoded COSE Sign1 statements.
        Path format: /tile/entries/{N} or /tile/entries/{N}.p/{W}
      operationId: getEntryTile
      parameters:
        - name: tile-path
          in: path
          required: true
          schema:
            type: string
          description: Tile path (e.g., "x001/x234/067" or "000.p/128")
      responses:
        '200':
          description: Entry tile data
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: Concatenated CBOR-encoded COSE Sign1 statements
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /checkpoint:
    get:
      summary: Get current checkpoint (signed tree head)
      description: |
        Retrieve current checkpoint as signed note.
        Format follows C2SP signed note specification with Ed25519 signature.
      operationId: getCheckpoint
      responses:
        '200':
          description: Signed checkpoint
          content:
            text/plain:
              schema:
                type: string
              example: |
                transparency.example.com/log
                1234567
                abc123def456...
                timestamp 1633024800

                â€” transparency.example.com wXyz123abc...
        '500':
          $ref: '#/components/responses/InternalError'

  /health:
    get:
      summary: Health check
      description: Reports status of database, object storage, and service components
      operationId: healthCheck
      responses:
        '200':
          description: Service healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Service unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

components:
  parameters:
    EntryId:
      name: entry-id
      in: path
      required: true
      schema:
        type: integer
        minimum: 0
      description: Entry ID (0-indexed position in log)

  responses:
    BadRequest:
      description: Bad request
      content:
        application/cbor:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    NotFound:
      description: Resource not found
      content:
        application/cbor:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    Conflict:
      description: Conflict (e.g., duplicate statement)
      content:
        application/cbor:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    InternalError:
      description: Internal server error
      content:
        application/cbor:
          schema:
            $ref: '#/components/schemas/ProblemDetails'

  schemas:
    ProblemDetails:
      type: object
      description: Concise Problem Details (CBOR format per RFC 7807)
      properties:
        type:
          type: string
          description: URI reference identifying the problem type
        title:
          type: string
          description: Short human-readable summary
        status:
          type: integer
          description: HTTP status code
        detail:
          type: string
          description: Human-readable explanation
        instance:
          type: string
          description: URI reference identifying the specific occurrence

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        components:
          type: object
          properties:
            database:
              $ref: '#/components/schemas/ComponentHealth'
            object_storage:
              $ref: '#/components/schemas/ComponentHealth'
            service:
              $ref: '#/components/schemas/ComponentHealth'

    ComponentHealth:
      type: object
      properties:
        status:
          type: string
          enum: [up, down]
        message:
          type: string
          description: Optional status message

security: []  # Authentication optional per SCRAPI, can be added by deployment

tags:
  - name: Configuration
    description: Service discovery and configuration
  - name: Registration
    description: Statement registration endpoints
  - name: Verification
    description: Receipt and proof retrieval
  - name: Tile Log
    description: C2SP tlog-tiles endpoints
  - name: Monitoring
    description: Health and status endpoints
